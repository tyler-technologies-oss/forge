import{a as l}from"./utils-Bd6MGx91.js";class d{constructor(){this.promise=new Promise((s,e)=>{this._resolveFn=s,this._rejectFn=e})}resolve(s){this._resolveFn(s)}reject(s){this._rejectFn(s)}}const o=Symbol("tryDismiss"),n=Symbol("forgeDismissibleStack");class m{constructor(){this._dismissibleElements=new Set,this._elementsRequestingDismiss=new Map}get dismissing(){return this._deferredDismiss?.promise??Promise.resolve()}static get instance(){return window[n]||(window[n]=new m),window[n]}async dismiss(s,e){const t=m.instance.getAll(),r=t.slice(t.indexOf(s)).filter(i=>i===s||i.contains(s)).reverse();for(const i of r)if(!i[o](e))break}async requestDismiss(s,e){if(this._deferredDismiss||(this._deferredDismiss=new d),this._elementsRequestingDismiss.set(s,e),await l(),!this.isRequestingLightDismiss(s))return;const t=Array.from(this._elementsRequestingDismiss).reverse();this._elementsRequestingDismiss.clear();try{for(const[r,i]of t)if(!r[o](i))break}finally{this._deferredDismiss?.resolve(),this._deferredDismiss=void 0}}add(s){this._dismissibleElements.add(s)}remove(s){this._dismissibleElements.delete(s),this._elementsRequestingDismiss.delete(s)}has(s){return this._dismissibleElements.has(s)}isRequestingLightDismiss(s){return this._elementsRequestingDismiss.has(s)}isMostRecent(s){const e=Array.from(this._dismissibleElements);return e[e.length-1]===s}getAll(){return Array.from(this._dismissibleElements)}}export{m as D,o as t};
