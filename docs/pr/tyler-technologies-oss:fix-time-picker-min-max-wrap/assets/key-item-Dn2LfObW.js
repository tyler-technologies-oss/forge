import{r as f,x as y}from"./iframe-DgPlgY2v.js";import{B as m,t as v,n as x}from"./base-lit-element-DD48r0Bf.js";import{s as h}from"./a11y-utils-fzPGYZJ6.js";import{C as d}from"./feature-detection-uS6p5jc8.js";import{r as z}from"./state-DGPIVT6j.js";import{e as C}from"./class-map-VyyRAxMT.js";/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const $=(o,t,e)=>(e.configurable=!0,e.enumerable=!0,Reflect.decorate&&typeof t!="object"&&Object.defineProperty(o,t,e),e);/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */function E(o){return(t,e)=>{const{slot:i}=o??{},r="slot"+(i?`[name=${i}]`:":not([name])");return $(t,e,{get(){var l;const a=(l=this.renderRoot)==null?void 0:l.querySelector(r);return(a==null?void 0:a.assignedNodes(o))??[]}})}}const w=":host{display:block}.forge-key{--_key-gap: var(--forge-key-gap, var(--forge-spacing-medium, 16px));--_key-direction: var(--forge-key-direction, row)}.forge-key{box-sizing:border-box;display:flex;flex-direction:var(--_key-direction);gap:var(--_key-gap);flex-wrap:wrap}";var O=Object.getOwnPropertyDescriptor,P=(o,t,e,i)=>{for(var r=i>1?void 0:i?O(t,e):t,a=o.length-1,l;a>=0;a--)(l=o[a])&&(r=l(r)||r);return r},u,g;const _="forge-key";let s=class extends(g=m,u=d,g){constructor(){super(),this._internals=this.attachInternals()}connectedCallback(){super.connectedCallback(),h(this,this._internals,{role:"list"})}render(){return y`<div part="root" class="forge-key"><slot></slot></div>`}};s.styles=f(w);s[u]=_;s=P([v(_)],s);const N=':host{display:inline}.forge-key-item{--_key-item-icon-color: var(--forge-key-item-icon-color, var(--forge-theme-tertiary, #3d5afe));--_key-item-label-color: var(--forge-key-item-label-color, var(--forge-theme-text-high, rgba(0, 0, 0, .87)));--_key-item-value-color: var(--forge-key-item-value-color, var(--forge-theme-text-medium, rgba(0, 0, 0, .6)));--_key-item-gap: var(--forge-key-item-gap, var(--forge-spacing-xsmall, 8px));--_key-item-icon-size: var(--forge-key-item-icon-size, calc(var(--forge-typography-font-size, 1rem) * 1))}.forge-key-item{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:var(--forge-typography-label1-font-family, var(--forge-typography-font-family, "Roboto", sans-serif));font-size:var(--forge-typography-label1-font-size, calc(var(--forge-typography-font-size, 1rem) * var(--forge-typography-label-font-size-scale, .75)));font-weight:var(--forge-typography-label1-font-weight, 400);line-height:var(--forge-typography-label1-line-height, calc(var(--forge-typography-font-size, 1rem) * var(--forge-typography-label-line-height-scale, 1.25)));letter-spacing:var(--forge-typography-label1-letter-spacing, .0357142857em);text-transform:var(--forge-typography-label1-text-transform, inherit);text-decoration:var(--forge-typography-label1-text-decoration, inherit);box-sizing:border-box;display:grid;grid-template:"icon label" "icon value";column-gap:var(--_key-item-gap);inline-size:fit-content;line-height:normal}.forge-key-item.inline{grid-template:"icon label value";grid-template-columns:auto 1fr auto;align-items:center;inline-size:auto}.forge-key-item.no-value{grid-template:"icon label";align-items:center}.forge-key-item.no-value .value{display:none}.forge-key-item:not(.inline,.no-value) .label{padding-block-start:1px}.icon{--forge-icon-size: var(--_key-item-icon-size);grid-area:icon;color:var(--_key-item-icon-color)}.label{grid-area:label;color:var(--_key-item-label-color)}.value{grid-area:value;color:var(--_key-item-value-color)}.default-icon{block-size:calc(var(--_key-item-icon-size) - 1px);inline-size:calc(var(--_key-item-icon-size) - 1px);border-radius:50%;background:currentColor}';var A=Object.defineProperty,M=Object.getOwnPropertyDescriptor,c=(o,t,e,i)=>{for(var r=i>1?void 0:i?M(t,e):t,a=o.length-1,l;a>=0;a--)(l=o[a])&&(r=(i?l(t,e,r):l(r))||r);return i&&r&&A(t,e,r),r},b,p;const k="forge-key-item";let n=class extends(p=m,b=d,p){constructor(){super(),this.inline=!1,this._hasValue=!1,this._internals=this.attachInternals()}connectedCallback(){super.connectedCallback(),h(this,this._internals,{role:"listitem"}),this._handleSlotChange()}render(){return y`
      <div part="root" class=${C({"forge-key-item":!0,inline:this.inline,"no-value":!this._hasValue})}>
        <div part="icon" class="icon">
          <slot name="icon">
            <div class="default-icon"></div>
          </slot>
        </div>
        <div part="label" class="label">
          <slot></slot>
        </div>
        <div part="value" class="value" @slotchange=${this._handleSlotChange}>
          <slot name="value"></slot>
        </div>
      </div>
    `}_handleSlotChange(){const o=this._valueNodes.filter(t=>{var e;return!!((e=t.textContent)!=null&&e.trim())});this._hasValue=!!o.length}};n.styles=f(N);n[b]=k;c([x({type:Boolean})],n.prototype,"inline",2);c([z()],n.prototype,"_hasValue",2);c([E({slot:"value"})],n.prototype,"_valueNodes",2);n=c([v(k)],n);export{$ as e,E as n};
