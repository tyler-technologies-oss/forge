@use '../core/styles/typography';
@use '../core/styles/utils';
@use '../core/styles/tokens/switch/tokens';

// The tallest element may be absolutely positioned so the container needs to
// be manually sized to match.
$_container-block-size: max(var(--_handle-height), var(--_track-height), var(--_current-state-layer-height));

// The effective track border radius, for use in other calculations.
$_track-border-radius: calc(var(--_track-height) / 2);

// Returns the wider of the handle width and state layer width.
$_max-handle-inline-size: max(var(--_handle-width), var(--_current-state-layer-width));

// Offsets the track to place the center of its border caps at the center of
// the handle's off and on positions.
$_track-margin-inline: calc(#{$_max-handle-inline-size} / 2 - #{$_track-border-radius});

// The x translation of the handle in its on state.
$_handle-on-translate: calc(var(--_track-width) - #{$_track-border-radius} * 2);

@mixin provide-theme($theme) {
  @include utils.provide(tokens.$tokens, $theme, switch);
}

@mixin host {
  display: inline-block;

  cursor: pointer;
}

@mixin host-disabled {
  opacity: var(--_disabled-opacity);

  cursor: not-allowed;
}

@mixin switch {
  position: relative;
  flex-direction: var(--_direction);
  flex-shrink: 0;
  align-items: center;
  justify-content: var(--_justify);
  gap: var(--_gap);

  display: flex;

  cursor: unset;
}

@mixin input {
  position: absolute;
  z-index: 1;

  appearance: none;

  outline: none;
  margin: 0;
  inline-size: 100%;
  block-size: 100%;

  cursor: unset;
}

@mixin container {
  position: relative;
  align-items: center;

  display: flex;

  block-size: #{$_container-block-size};
}

@mixin track {
  transition-property: background-color, border-color, border-width;
  transition-duration: var(--_animation-duration);
  transition-timing-function: var(--_animation-timing);

  box-sizing: border-box;
  margin-inline: #{$_track-margin-inline};
  border-width: var(--_track-off-border-width);
  border-color: var(--_track-off-border-color);
  border-style: solid;
  border-radius: var(--_track-shape);
  inline-size: var(--_track-width);
  block-size: var(--_track-height);

  background-color: var(--_track-off-color);
}

@mixin track-on {
  border-width: var(--_track-on-border-width);
  border-color: var(--_track-on-border-color);

  background-color: var(--_track-on-color);
}

@mixin track-active {
  border-width: var(--_track-active-off-border-width);
  border-color: var(--_track-active-off-border-color);

  background-color: var(--_track-active-off-color);
}

@mixin track-active-on {
  border-width: var(--_track-active-on-border-width);
  border-color: var(--_track-active-on-border-color);

  background-color: var(--_track-active-on-color);
}

@mixin handle {
  position: absolute;
  justify-content: center;
  align-items: center;

  display: flex;

  transition-property: translate;
  transition-duration: var(--_animation-duration);
  transition-timing-function: var(--_animation-timing);

  border-radius: var(--_handle-shape);
  inline-size: var(--_current-state-layer-width);
  block-size: var(--_current-state-layer-height);

  &::before {
    content: '';

    position: relative;

    display: block;
    scale: var(--_handle-off-scale);

    transition:
      background-color var(--_animation-duration) var(--_animation-timing),
      box-shadow var(--_animation-duration) var(--_animation-timing),
      scale var(--_animation-duration) var(--_active-animation-timing);

    box-shadow: var(--_handle-off-elevation);
    border-radius: var(--_handle-shape);
    inline-size: var(--_handle-width);
    block-size: var(--_handle-height);

    background-color: var(--_handle-off-color);
  }
}

@mixin handle-on {
  translate: #{$_handle-on-translate};

  &::before {
    scale: var(--_handle-on-scale);

    box-shadow: var(--_handle-on-elevation);

    background-color: var(--_handle-on-color);
  }
}

@mixin handle-active {
  &::before {
    scale: var(--_handle-active-off-scale);

    box-shadow: var(--_handle-active-off-elevation);

    background-color: var(--_handle-active-off-color);
  }
}

@mixin handle-active-on {
  &::before {
    scale: var(--_handle-active-on-scale);

    box-shadow: var(--_handle-active-on-elevation);

    background-color: var(--_handle-active-on-color);
  }
}

@mixin icon {
  --forge-icon-font-size: var(--_icon-off-size);

  position: absolute;
  align-items: center;
  justify-content: center;

  display: flex;

  transition-property: opacity, scale;
  transition-duration: var(--_animation-duration);
  transition-timing-function: var(--_animation-timing);

  inline-size: var(--_icon-off-size);
  block-size: var(--_icon-off-size);

  color: var(--_icon-off-color);
  fill: var(--_icon-off-color);

  font-size: var(--_icon-off-size);
}

@mixin icon-on {
  --forge-icon-font-size: var(--_icon-on-size);

  inline-size: var(--_icon-on-size);
  block-size: var(--_icon-on-size);

  color: var(--_icon-on-color);
  fill: var(--_icon-on-color);

  font-size: var(--_icon-on-size);
}

@mixin icon-active {
  scale: var(--_icon-active-off-scale);

  color: var(--_icon-active-off-color);
  fill: var(--_icon-active-off-color);
}

@mixin icon-active-on {
  scale: var(--_icon-active-on-scale);

  color: var(--_icon-active-on-color);
  fill: var(--_icon-active-on-color);
}

@mixin icon-on-shown {
  opacity: 1;
  scale: var(--_icon-on-scale);
}

@mixin icon-off-shown {
  opacity: 1;
  scale: var(--_icon-off-scale);
}

@mixin icon-hidden {
  opacity: 0;
  scale: 0.4;
}

@mixin label {
  @include typography.style(label);

  &:empty {
    display: none;
  }
}
