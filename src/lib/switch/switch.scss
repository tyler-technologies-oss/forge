@use './core';
@use './configuration';
@use '../focus-indicator';
@use '../state-layer';
@use './token-utils' as *;

:host {
  @include core.host;
}

:host([hidden]) {
  display: none;
}

.forge-switch {
  @include configuration.configuration;
}

// Off
.forge-switch {
  @include core.switch;

  #{declare(current-state-layer-width)}: #{token(state-layer-width)};
  #{declare(current-state-layer-height)}: #{token(state-layer-height)};

  .container {
    @include core.container;
  }

  .input {
    @include core.input;
  }

  .track {
    @include core.track;
  }

  .handle {
    @include core.handle;
  }

  .icon {
    @include core.icon;

    // TODO: Use when icon supports tokens
    // @include icon.provide-theme((
    //   font-size: #{token(icon-size)}
    // ));
    --forge-icon-font-size: #{token(icon-off-size)};

    &__on {
      // TODO: Use when icon supports tokens
      // @include icon.provide-theme((
      //   font-size: #{token(icon-on-size)}
      // ));
      --forge-icon-font-size: #{token(icon-on-size)};

      @include core.icon-on;
      @include core.icon-hidden;
    }

    &__off {
      @include core.icon-off-shown;
    }
  }

  .label {
    @include core.label;
  }

  .hidden {
    display: none;
  }

  ::slotted([slot=input]) {
    @include core.input;
  }
}

// On
:host([on]) {
  .track {
    @include core.track-on;
  }

  .handle {
    @include core.handle-on;

    .icon {
      &__on {
        @include core.icon-on-shown;
      }

      &__off {
        @include core.icon-hidden;
      }

    }
  }

  forge-state-layer {
    @include state-layer.provide-theme((
      color: #{token(state-layer-on-color)}
    ));
  }
}

// Active
:host(:not([disabled]):not([readonly])) {
  .forge-switch {
    .container:active {
      .track {
        @include core.track-active;
      }
  
      .handle {
        @include core.handle-active;
  
        .icon {
          @include core.icon-active;
        }
      }
    }
  }
}
:host(:not([disabled]):not([readonly])[on]) {
  .forge-switch {
    .container:active {
      .track {
        @include core.track-active-on;
      }
  
      .handle {
        @include core.handle-active-on;
  
        .icon {
          @include core.icon-active-on;
        }
      }
    }
  }
}

// Dense
:host([dense]) {
  .forge-switch {
    // Set the state layer width and height for use in calculations of other properties
    #{declare(current-state-layer-width)}: #{token(state-layer-dense-width)};
    #{declare(current-state-layer-height)}: #{token(state-layer-dense-height)};
  }
}

// Disabled
:host([disabled]) {
  .forge-switch {
    @include core.switch-disabled;

    .container {
      @include core.container-disabled;
    }

    .handle {
      @include core.handle-disabled;
    }
  }
}

// Readonly
:host([readonly]) {
  .forge-switch {
    .container {
      @include core.container-disabled;
    }
  }
}

// Reduced motion
@media (prefers-reduced-motion) {
  .switch {
    @include override(animation-duration, 0s);
  }
}

forge-state-layer {
  @include state-layer.provide-theme((
    color: #{token(state-layer-off-color)}
  ));
}

forge-focus-indicator {
  @include focus-indicator.provide-theme((
    shape: #{token(track-shape)},
    outward-offset: 0px // Requires unit
  ));
}
