@use '../core/styles/elevation';
@use '../core/styles/typography';
@use '../core/styles/animation';
@use './token-utils' as *;

// The max clip is reduced by 1 full tick display which is 2x the container
// size to account for always showing the active track on the outside
// edge of the last tick.
$_active-track-max-clip: calc(100% - #{variable(with-tick-marks-container-size)} * 2);

// When the start fraction is !0, add clipping by the tick container size
$_start-fraction-not-zero: min(#{variable(start-fraction)} * 1e9, 1);
$_active-track-start-offset: calc(#{variable(with-tick-marks-container-size)} * #{$_start-fraction-not-zero});
$_active-track-start-clip: calc(#{$_active-track-start-offset} + #{$_active-track-max-clip} * #{variable(start-fraction)});

// When the end fraction is !1, add clipping by the tick container size
$_end-fraction-not-one: min((1 - #{variable(end-fraction)}) * 1e9, 1);
$_active-track-end-offset: calc(#{variable(with-tick-marks-container-size)} * #{$_end-fraction-not-one});
$_active-track-end-clip: calc(#{$_active-track-end-offset} + #{$_active-track-max-clip} * (1 - #{variable(end-fraction)}));

@mixin container {
  display: inline-flex;
  vertical-align: middle;
  min-inline-size: 100%;
}

@mixin slider {
  flex: 1;
  display: flex;
  align-items: center;
  position: relative;
  block-size: #{variable(state-layer-size)};
  pointer-events: none;
  touch-action: none;
}

@mixin range {
  // Clip the inputs to the space left/right of the center point between the
  // values so the right input gets pointer events.
  $_clip-to-start: calc(
    #{variable(state-layer-size)} / 2 + (100% - #{variable(state-layer-size)}) *
    (#{variable(start-fraction)} + ((#{variable(end-fraction)} - #{variable(start-fraction)}) / 2))
  );

  $_clip-to-end: calc(100% - $_clip-to-start);

  // in 'rtl', clip right side of "lesser" input
  @each $_rtl-selector in get-rtl-selectors('input.start') {
    #{$_rtl-selector} {
      clip-path: inset(0 0 0 $_clip-to-end);
    }
  }

  input.start {
    clip-path: inset(0 $_clip-to-end 0 0);
  }

  input.end {
    clip-path: inset(0 0 0 $_clip-to-start);
  }

  // in 'rtl', clip left side of "greater" input
  @each $_rtl-selector in get-rtl-selectors('input.end') {
    #{$_rtl-selector} {
      clip-path: inset(0 $_clip-to-start 0 0);
    }
  }
}

@mixin track {
  position: absolute;
  inset: 0;
  display: flex;
  align-items: center;
}

@mixin track-dimensions {
  $_track-padding: calc((#{variable(state-layer-size)} / 2) - #{variable(with-tick-marks-container-size)});

  position: absolute;
  inset-inline-start: $_track-padding;
  inset-inline-end: $_track-padding;
  background-size: calc((100% - #{variable(with-tick-marks-container-size)} * 2) / #{variable(tick-count)}) 100%;
}

@mixin track-active {
  block-size: #{variable(active-track-height)};
  border-radius: #{variable(active-track-shape)};
  clip-path: inset(0 $_active-track-end-clip 0 $_active-track-start-clip);
  background-color: #{variable(active-track-color)};
}

@mixin track-inactive {
  block-size: #{variable(inactive-track-height)};
  border-radius: #{variable(inactive-track-shape)};
  background-color: #{variable(inactive-track-color)};
}

@mixin track-active-disabled {
  background-color: #{variable(disabled-active-track-color)};
}

@mixin track-inactive-disabled {
  opacity: calc((1 / #{variable(disabled-active-track-opacity)}) * #{variable(disabled-inactive-track-opacity)});
  background-color: #{variable(disabled-inactive-track-color)};
}

@mixin rtl-track-clipping {
  clip-path: inset(0 $_active-track-start-clip 0 $_active-track-end-clip);
}

@mixin tickmarks-inactive {
  background-image: get-tick-image(#{variable(with-tick-marks-inactive-container-color)});
}

@mixin tickmarks-active {
  background-image: get-tick-image(#{variable(with-tick-marks-active-container-color)});
}

@mixin tickmarks-active-disabled {
  background-image: get-tick-image(#{variable(with-tick-marks-disabled-active-container-color)});
}

@mixin tickmarks-inactive-disabled {
  background-image: get-tick-image(#{variable(with-tick-marks-disabled-inactive-container-color)});
}

@mixin handle-container-dimensions {
  position: relative;
  block-size: 100%;
  inline-size: 100%;
}

@mixin handle-container-padded {
  padding-inline: calc(#{variable(state-layer-size)} / 2);
}

@mixin handle-container {
  position: absolute;
  inset-block-start: 0;
  inset-block-end: 0;
  inset-inline-start: calc(100% * #{variable(start-fraction)});
  inline-size: calc(100% * (#{variable(end-fraction)} - #{variable(start-fraction)}));
}

@mixin handle {
  position: absolute;
  block-size: #{variable(state-layer-size)};
  inline-size: #{variable(state-layer-size)};
  border-radius: #{variable(handle-shape)};
  display: grid;
  place-items: center;
}

@mixin handle-start {
  inset-inline-start: calc(0px - #{variable(state-layer-size)} / 2);
}

@mixin handle-end {
  inset-inline-end: calc(0px - #{variable(state-layer-size)} / 2);
}

@mixin handle-thumb {
  @include elevation.box-shadow(1);

  position: absolute;
  height: #{variable(handle-height)};
  width: #{variable(handle-width)};
  border-radius: #{variable(handle-shape)};
  background: #{variable(handle-color)};
}

@mixin handle-thumb-hover {
  background: #{variable(hover-handle-color)};
}

@mixin handle-thumb-pressed {
  background: #{variable(pressed-handle-color)};
}

@mixin handle-thumb-focused {
  background: #{variable(focus-handle-color)};
}

@mixin handle-thumb-disabled {
  @include elevation.box-shadow(0);

  background: #{variable(disabled-handle-color)};
}

@mixin handle-label {
  @include typography.style(label, $exclude: [font-weight]);

  position: absolute;
  box-sizing: border-box;
  display: grid;
  padding: 4px;
  place-items: center;
  border-radius: #{variable(label-container-shape)};
  color: #{variable(label-text-color)};
  font-weight: 500;
  white-space: nowrap;
  inset-block-end: 100%;
  min-inline-size: #{variable(label-container-height)};
  min-block-size: #{variable(label-container-height)};
  background: #{variable(label-container-color)};
  transition: transform animation.variable(duration-short2) animation.variable(easing-standard);
  transform-origin: center bottom;
  transform: scale(0);
}

@mixin handle-label-disabled {
  background: #{variable(disabled-handle-color)};
}

@mixin handle-label-content {
  z-index: 1;
}

@mixin handle-label-base {
  position: absolute;
  display: block;
  background: inherit;
}

@mixin handle-label-top {
  inset: 0;
  border-radius: inherit;
}

@mixin handle-label-bottom {
  $_triangle-size: calc(#{variable(label-container-height)} / 2);
  inline-size: $_triangle-size;
  block-size: $_triangle-size;
  bottom: calc(#{variable(label-container-height)} / -10);
  transform: rotate(45deg);
}

@mixin handle-label-visible {
  transform: scale(1);
}

@mixin input-disabled {
  cursor: not-allowed;
}

@mixin handles-overlapping {
  border: #{variable(with-overlap-handle-outline-color)} solid #{variable(with-overlap-handle-outline-width)};
}

@mixin on-top {
  z-index: 1;
}

@mixin input {
  opacity: 0;
  -webkit-tap-highlight-color: transparent;
  position: absolute;
  box-sizing: border-box;
  height: 100%;
  width: 100%;
  margin: 0;
  background: transparent;
  cursor: pointer;
  pointer-events: auto;
  appearance: none;

  &:focus {
    outline: none;
  }

  &::-webkit-slider-runnable-track {
    -webkit-appearance: none;
  }

  &::-moz-range-track {
    appearance: none;
  }

  &::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    block-size: #{variable(state-layer-size)};
    inline-size: #{variable(state-layer-size)};
    transform: scaleX(0);
    opacity: 0;
    z-index: 2;
  }

  &::-moz-range-thumb {
    appearance: none;
    block-size: #{variable(state-layer-size)};
    inline-size: #{variable(state-layer-size)};
    transform: scaleX(0);
    opacity: 0;
    z-index: 2;
  }
}

///
/// Adapted and influenced from [Material Web](https://github.com/material-components/material-web).
/// The original source code can be found at [GitHub](https://github.com/material-components/material-web/blob/main/slider/lib/_slider.scss)
///

// Returns a background-image with sized circular ticks of the given color.
@function get-tick-image($color) {
  @return radial-gradient(
    circle at #{variable(with-tick-marks-container-size)} center,
    #{$color} 0,
    #{$color} calc(#{variable(with-tick-marks-container-size)} / 2),
    transparent calc(#{variable(with-tick-marks-container-size)} / 2)
  );
}

// Returns a list of rtl selectors to construct distinct rulesets. Separating
// rulesets ensure they are not dropped on browsers where one is not supported;
// note, `:where` cannot be used to create compound selectors that contain
// pseudo elements
// (e.g. this does not work: `:where(:host([dir="rtl"]) .foo::after)`),
@function get-rtl-selectors($selector: '', $suffix: '') {
  @return (
    // TODO: remove selectors other than `:dir` when browser support improves.
    ':host-context([dir="rtl"]) #{$selector}#{$suffix}',
    ':host([dir="rtl"]) #{$selector}#{$suffix}',
    '#{$selector}:dir(rtl)#{$suffix}'
  );
}

