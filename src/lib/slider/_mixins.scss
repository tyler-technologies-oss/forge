@use '../theme';
@use '@material/elevation/elevation-theme' as mdc-elevation-theme;
@use '@material/ripple/ripple' as mdc-ripple;
@use '@material/ripple/ripple-theme' as mdc-ripple-theme;

$ripple-target: '.handle';

@mixin host {
  display: inline-flex;
  vertical-align: middle;
  min-inline-size: 100%;
}

@mixin core-styles {
  @include mdc-ripple.common;

  // The max clip is reduced by 1 full tick display which is 2x the container
  // size to account for always showing the active track on the outside
  // edge of the last tick.
  $_active-track-max-clip: calc(
    100% - var(--_with-tick-marks-container-size) * 2
  );
  // When the start fraction is !0, add clipping by the tick container size
  $_start-fraction-not-zero: min(var(--_start-fraction) * 1e9, 1);
  $_active-track-start-offset: calc(var(--_with-tick-marks-container-size) * $_start-fraction-not-zero);
  $_active-track-start-clip: calc($_active-track-start-offset + $_active-track-max-clip * var(--_start-fraction));

  // When the end fraction is !1, add clipping by the tick container size
  $_end-fraction-not-one: min((1 - var(--_end-fraction)) * 1e9, 1);
  $_active-track-end-offset: calc(var(--_with-tick-marks-container-size) * $_end-fraction-not-one);
  $_active-track-end-clip: calc($_active-track-end-offset + $_active-track-max-clip * (1 - var(--_end-fraction)));

  @media (prefers-reduced-motion) {
    .label {
      transition-duration: 0;
    }
  }

  .forge-slider {
    --_start-fraction: 0;
    --_end-fraction: 0;
    --_tick-count: 100;

    --_active-track-color: var(--forge-slider-active-track-color, var(--mdc-theme-primary, theme.$primary));
    --_active-track-height: var(--forge-slider-active-track-height, 4px);
    --_active-track-shape: var(--forge-slider-active-track-shape, 9999px);
    --_disabled-active-track-color: var(--forge-slider-disabled-active-track-color, var(--mdc-theme-on-surface, theme.$on-surface));
    --_disabled-active-track-opacity: var(--forge-slider-disabled-active-track-opacity, 0.38);
    --_disabled-handle-color: var(--forge-slider-disabled-handle-color, var(--mdc-theme-on-surface, theme.$on-surface));
    // --_disabled-handle-elevation: var(--forge-slider-disabled-handle-elevation, 0);
    --_disabled-inactive-track-color: var(--forge-slider-disabled-inactive-track-color, var(--md-sys-color-on-surface, #1d1b20));
    --_disabled-inactive-track-opacity: var(--forge-slider-disabled-inactive-track-opacity, 0.12);
    --_focus-handle-color: var(--forge-slider-focus-handle-color, var(--mdc-theme-primary, theme.$primary));
    --_handle-color: var(--forge-slider-handle-color, var(--mdc-theme-primary, theme.$primary));
    // --_handle-elevation: var(--forge-slider-handle-elevation, 1);
    --_handle-height: var(--forge-slider-handle-height, 20px);
    // --_handle-shadow-color: var(--forge-slider-handle-shadow-color, var(--md-sys-color-shadow, #000));
    --_handle-shape: var(--forge-slider-handle-shape, 9999px);
    --_handle-width: var(--forge-slider-handle-width, 20px);
    --_hover-handle-color: var(--forge-slider-hover-handle-color, var(--mdc-theme-primary, theme.$primary));
    // --_hover-state-layer-color: var(--forge-slider-hover-state-layer-color, var(--md-sys-color-primary, #6750a4));
    // --_hover-state-layer-opacity: var(--forge-slider-hover-state-layer-opacity, 0.08);
    --_inactive-track-color: var(--forge-slider-inactive-track-color, color-mix(in srgb, var(--mdc-theme-primary, theme.$primary) 24%, transparent));
    --_inactive-track-height: var(--forge-slider-inactive-track-height, 4px);
    --_inactive-track-shape: var(--forge-slider-inactive-track-shape, 9999px);
    --_label-container-color: var(--forge-slider-label-container-color, var(--mdc-theme-primary, theme.$primary));
    --_label-container-height: var(--forge-slider-label-container-height, 28px);
    --_label-label-text-color: var(--forge-slider-label-label-text-color, var(--mdc-theme-on-primary, theme.$on-primary));
    --_label-label-text-type: var(--forge-slider-label-label-text-type, var(--md-sys-typescale-label-medium, 500 0.75rem / 1rem var(--md-ref-typeface-plain, Roboto)));
    --_pressed-handle-color: var(--forge-slider-pressed-handle-color, var(--mdc-theme-primary, theme.$primary));
    // --_pressed-state-layer-color: var(--forge-slider-pressed-state-layer-color, var(--mdc-theme-primary, theme.$primary));
    // --_pressed-state-layer-opacity: var(--forge-slider-pressed-state-layer-opacity, 0.12);
    --_state-layer-size: var(--forge-slider-state-layer-size, 40px);
    --_with-overlap-handle-outline-color: var(--forge-slider-with-overlap-handle-outline-color, var(--mdc-theme-on-primary, theme.$on-primary));
    --_with-overlap-handle-outline-width: var(--forge-slider-with-overlap-handle-outline-width, 1px);
    --_with-tick-marks-active-container-color: var(--forge-slider-with-tick-marks-active-container-color, var(--mdc-theme-on-primary, theme.$on-primary));
    --_with-tick-marks-container-size: var(--forge-slider-with-tick-marks-container-size, 2px);
    --_with-tick-marks-disabled-container-color: var(--forge-slider-with-tick-marks-disabled-container-color, var(--mdc-theme-on-surface, theme.$on-surface));
    --_with-tick-marks-inactive-container-color: var(--forge-slider-with-tick-marks-inactive-container-color, var(--md-sys-color-on-surface-variant, #49454f));

    flex: 1;
    display: flex;
    align-items: center;
    position: relative;
    block-size: var(--_state-layer-size);
    pointer-events: none;
    touch-action: none;

    &__track {
      position: absolute;
      inset: 0;
      display: flex;
      align-items: center;
  
      &::before,
      &::after {
        position: absolute;
        content: '';
  
        $_track-padding: calc((var(--_state-layer-size) / 2) - var(--_with-tick-marks-container-size));
  
        inset-inline-start: $_track-padding;
        inset-inline-end: $_track-padding;
        background-size: calc((100% - var(--_with-tick-marks-container-size) * 2) / var(--_tick-count)) 100%;
      }
  
      &::before {
        block-size: var(--_inactive-track-height);
        border-radius: var(--_inactive-track-shape);
        background-color: var(--_inactive-track-color);
      }
  
      &::after {
        block-size: var(--_active-track-height);
        border-radius: var(--_active-track-shape);
        clip-path: inset(0 $_active-track-end-clip 0 $_active-track-start-clip);
        background-color: var(--_active-track-color);
      }
  
      &.forge-slider__track--tickmarks {
        &::before {
          background-image: _get-tick-image('var(--_with-tick-marks-inactive-container-color)');
        }
  
        &::after {
          background-image: _get-tick-image('var(--_with-tick-marks-active-container-color)');
        }
      }
    }

    &__handle-ripple {
      @include mdc-ripple.surface;
      @include mdc-ripple.radius-unbounded;
      @include mdc-ripple-theme.states($color: primary);
  
      box-sizing: content-box;
      width: 100%;
      height: 100%;
    }
  }

  // rtl for active track clipping
  @each $_rtl-selectors in _get-rtl-selectors('.forge-slider__track', '::after') {
    #{$_rtl-selectors} {
      clip-path: inset(0 $_active-track-start-clip 0 $_active-track-end-clip);
    }
  }

  // container for the handle that is inset with padding to be
  // track-sized so that the handle container can be positioned with % only
  // and avoid a Safari issue with not being able to transition values that
  // are calced from different units.
  // TODO remove when https://bugs.webkit.org/show_bug.cgi?id=23775 is
  // addressed.
  .handle-container-padded {
    position: relative;
    block-size: 100%;
    inline-size: 100%;
    padding-inline: calc(var(--_state-layer-size) / 2);
  }

  .handle-container-block {
    position: relative;
    block-size: 100%;
    inline-size: 100%;
  }

  .handle-container {
    position: absolute;
    inset-block-start: 0;
    inset-block-end: 0;
    inset-inline-start: calc(100% * var(--_start-fraction));
    inline-size: calc(100% * (var(--_end-fraction) - var(--_start-fraction)));
  }

  .handle {
    position: absolute;
    block-size: var(--_state-layer-size);
    inline-size: var(--_state-layer-size);
    border-radius: var(--_handle-shape);
    display: grid;
    place-items: center;
  }

  .handle-nub {
    position: absolute;
    height: var(--_handle-height);
    width: var(--_handle-width);
    border-radius: var(--_handle-shape);
    background: var(--_handle-color);
    @include mdc-elevation-theme.elevation(1);
  }

  :host([disabled]) .handle-nub {
    background: var(--_disabled-handle-color);
  }

  input.end:focus ~ .handle-container-padded .handle.end > .handle-nub,
  input.start:focus ~ .handle-container-padded .handle.start > .handle-nub {
    background: var(--_focus-handle-color);
  }

  // prefix classes exist to overcome specificity of focus styling.
  .forge-slider > .handle-container-padded .handle.hover > .handle-nub {
    background: var(--_hover-handle-color);
  }

  :host([disabled]) {
    opacity: var(--_disabled-active-track-opacity);
    @include mdc-elevation-theme.elevation(0);
  }

  :host([disabled]) .track::before {
    // Note, the active track opacity is applied to the entire host,
    // so the inactive track is calc'd to compensate.
    opacity: calc((1 / var(--_disabled-active-track-opacity)) * var(--_disabled-inactive-track-opacity));
    background-color: var(--_disabled-inactive-track-color);
  }

  :host([disabled]) .track::after {
    background-color: var(--_disabled-active-track-color);
  }

  :host([disabled]) .track.forge-slider__track--tickmarks::before,
  :host([disabled]) .track.forge-slider__track--tickmarks::after {
    background-image: _get-tick-image('var(--_with-tick-marks-disabled-container-color)');
  }

  :host(:not([disabled])) {
    input.end:active ~ .handle-container-padded .handle.end > .handle-nub,
    input.start:active ~ .handle-container-padded .handle.start > .handle-nub {
      background: var(--_pressed-handle-color);
    }
  }

  .on-top.overlapping {
    .handle-nub,
    .label,
    .label::before {
      border: var(--_with-overlap-handle-outline-color) solid var(--_with-overlap-handle-outline-width);
    }
  }

  .handle.start {
    inset-inline-start: calc(0px - var(--_state-layer-size) / 2);
  }
  .handle.end {
    inset-inline-end: calc(0px - var(--_state-layer-size) / 2);
  }

  .label {
    position: absolute;
    box-sizing: border-box;
    display: grid;
    padding: 4px;
    place-items: center;
    border-radius: 9999px;
    color: var(--_label-label-text-color);
    font: var(--_label-label-text-type);
    // margin-block-end: calc(48px - var(--_state-layer-size));
    inset-block-end: 100%;
    min-inline-size: var(--_label-container-height);
    min-block-size: var(--_label-container-height);
    background: var(--_label-container-color);
    transition: transform 100ms cubic-bezier(0.2, 0, 0, 1);
    transform-origin: center bottom;
    transform: scale(0);
  }

  // note, `:has` needed only for Safari; it's wrapped in a "forgiving"
  // `:where` since the syntax isn't supported yet in Firefox.
  :host(:focus-within) .label,
  .handle-container.hover .label,
  :where(:has(input:active)) .label {
    transform: scale(1);
  }

  .label::before,
  .label::after {
    position: absolute;
    display: block;
    content: '';
    background: inherit;
  }

  // triangle below label
  .label::before {
    // Note, sizing carefully estimated to create an ice cream cone shape.
    $_triangleSize: calc(var(--_label-container-height) / 2);
    inline-size: $_triangleSize;
    block-size: $_triangleSize;
    bottom: calc(var(--_label-container-height) / -10);
    transform: rotate(45deg);
  }

  // fits inside label and occludes top half of triangle.
  .label::after {
    inset: 0px;
    border-radius: inherit;
  }

  // must stack above the label's pseudo-elements.
  .label-content {
    z-index: 1;
  }

  // note, the input is what the user interacts with so it must render and
  // be clickable, but it is visually hidden via opacity: 0 and non-clickable
  // styled ui is shown instead and positioned accordingly.
  input[type=range] {
    opacity: 0;
    -webkit-tap-highlight-color: transparent;
    position: absolute;
    box-sizing: border-box;
    // needed for firefox
    height: 100%;
    width: 100%;
    margin: 0;
    background: transparent;
    cursor: pointer;
    pointer-events: auto;
    appearance: none;
  }

  input[type=range]:focus {
    outline: none;
  }

  ::-webkit-slider-runnable-track {
    -webkit-appearance: none;
  }

  ::-moz-range-track {
    appearance: none;
  }

  ::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    // note, this is sized to align with thumb but is 0 width so that
    // fine adjustments are possible
    block-size: var(--_state-layer-size);
    inline-size: var(--_state-layer-size);
    transform: scaleX(0);
    opacity: 0;
    z-index: 2;
  }

  ::-moz-range-thumb {
    appearance: none;
    block-size: var(--_state-layer-size);
    inline-size: var(--_state-layer-size);
    transform: scaleX(0);
    opacity: 0;
    z-index: 2;
  }

  // Clip the inputs to the space left/right of the center point between the
  // values so the right input gets pointer events.
  $_clip-to-start: calc(
    var(--_state-layer-size) / 2 + (100% - var(--_state-layer-size)) *
    (var(--_start-fraction) + ((var(--_end-fraction) - var(--_start-fraction)) / 2))
  );

  $_clip-to-end: calc(100% - $_clip-to-start);

  // clip left side of "start" input
  .forge-slider--range input.start {
    clip-path: inset(0 $_clip-to-end 0 0);
  }

  // in 'rtl', clip right side of "lesser" input
  @each $_rtl-selector in _get-rtl-selectors('.forge-slider--range input.start') {
    #{$_rtl-selector} {
      clip-path: inset(0 0 0 $_clip-to-end);
    }
  }

  // clip right side of "end" input
  .forge-slider--range input.end {
    clip-path: inset(0 0 0 $_clip-to-start);
  }

  // in 'rtl', clip left side of "greater" input
  @each $_rtl-selector in _get-rtl-selectors('.forge-slider--range input.end') {
    #{$_rtl-selector} {
      clip-path: inset(0 $_clip-to-start 0 0);
    }
  }

  .on-top {
    z-index: 1;
  }
}

// Returns a background-image with sized circular ticks of the given color.
@function _get-tick-image($color) {
  @return radial-gradient(
    circle at var(--_with-tick-marks-container-size) center,
    #{$color} 0,
    #{$color} calc(var(--_with-tick-marks-container-size) / 2),
    transparent calc(var(--_with-tick-marks-container-size) / 2)
  );
}

// Returns a list of rtl selectors to construct distinct rulesets. Seprating
// rulesets ensure they are not dropped on browsers where one is not supported;
// note, `:where` cannot be used to create compound selectors that contain
// pseudo elements
// (e.g. this does not work: `:where(:host([dir="rtl"]) .foo::after)`),
@function _get-rtl-selectors($selector: '', $suffix: '') {
  @return (
    // TODO(b/279152429) remove selectors other than `:dir` when browser
    // support improves.
    ':host-context([dir="rtl"]) #{$selector}#{$suffix}',
    ':host([dir="rtl"]) #{$selector}#{$suffix}',
    '#{$selector}:dir(rtl)#{$suffix}'
  );
}
