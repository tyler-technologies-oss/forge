@use './token-utils' as *;

@mixin base {
  animation-delay: 0s, calc(#{variable(duration)} * 0.25);
  animation-duration: calc(#{variable(duration)} * 0.25), calc(#{variable(duration)} * 0.75);
  animation-timing-function: #{variable(easing)};
  box-sizing: border-box;
  color: #{variable(color)};
  display: none;
  pointer-events: none;
  position: absolute;
  margin-block: #{variable(margin-block)};
  margin-inline: #{variable(margin-inline)};
}

@mixin active {
  display: flex;
}

@mixin circular {
  @include override(shape, 50%);
}

@mixin outward {
  animation-name: outward-grow, outward-shrink;
  border-end-end-radius: calc(#{variable(shape-end-end)} + #{variable(outward-offset)});
  border-end-start-radius: calc(#{variable(shape-end-start)} + #{variable(outward-offset)});
  border-start-end-radius: calc(#{variable(shape-start-end)} + #{variable(outward-offset)});
  border-start-start-radius: calc(#{variable(shape-start-start)} + #{variable(outward-offset)});
  inset: calc(-1 * #{variable(outward-offset)});
  outline: #{variable(width)} solid currentColor;
}

@mixin inward {
  animation-name: inward-grow, inward-shrink;
  border-end-end-radius: calc(#{variable(shape-end-end)} - #{variable(inward-offset)});
  border-end-start-radius: calc(#{variable(shape-end-start)} - #{variable(inward-offset)});
  border-start-end-radius: calc(#{variable(shape-start-end)} - #{variable(inward-offset)});
  border-start-start-radius: calc(#{variable(shape-start-start)} - #{variable(inward-offset)});
  border: #{variable(width)} solid currentColor;
  inset: #{variable(inward-offset)};
}
