@use 'sass:map';
@use './core';
@use '../core/styles/theme';
@use '../focus-indicator';
@use '../state-layer';
@use '../utils/mixins' as utils;
@use './token-utils' as *;

$focus: ':not([disabled]):focus-within';
$hover: ':not([disabled]):hover';
$inline-start-label: ':where([label-position=inline-start], :not([label-position]))';

// Maps to look up the selector for a given density, theme, or variant
$densities: (
  extra-small: ':where([density=extra-small], [dense])',
  small: ':not([dense])[density=small]',
  medium: ':not([dense]):where([density=medium], :not([density]))',
  large: ':not([dense])[density=large]',
  extra-large: ':not([dense])[density=extra-large]'
);
$themes: (
  default: ':where([theme=default], :not([theme]))',
  primary: '[theme=primary]',
  secondary: '[theme=secondary]',
  tertiary: '[theme=tertiary]',
  success: '[theme=success]',
  error: '[theme=error]',
  warning: '[theme=warning]',
  info: '[theme=info]'
);
$variants: (
  plain: '[variant=plain]',
  outlined: ':where([variant=outlined], :not([variant]))',
  tonal: '[variant=tonal]',
  filled: '[variant=filled]',
  raised: '[variant=raised]'
);

@layer base, label, variant; 

//
// Host
//

:host {
  @include core.host-configuration;
}

:host {
  @include core.host;
}

:host([hidden]) {
  display: none;
}


//
// Base
//

@layer base {
  .forge-field {
    @include core.configuration;
  }
  
  .forge-field {
    @include core.base;
  
    .container {
      @include core.container;

      &::before {
        @include core.container-background;
      }
    }
  
    .input {
      @include core.input;
    }
  
    .label {
      @include core.label;
    }
  
    .popover-icon {
      display: none;
  
      &__arrow {
        @include core.popover-icon-arrow;
      }
    }
  
    .start,
    .end,
    .accessory,
    .helper-text,
    .helper-text-start,
    .helper-text-end {
      display: none;
    }
  }
}

//
// Named slots
//

.forge-field {
  &--has-start {
    .start {
      @include core.start;
    }
  }

  &--has-end {
    .end {
      @include core.end;
    }
  }

  &--has-accessory {
    .accessory {
      @include core.accessory;
    }
  }

  &--has-helper-text-start,
  &--has-helper-text-end {
    .helper-text {
      @include core.helper-text;
    }
  }
}

@each $variant, $variant-selector in $variants {
  :host(#{$variant-selector}) {
    .forge-field--has-accessory {
      .accessory {
        @include core.accessory-variant($variant);
      }
    }
  }
}

//
// Popover icon
//

:host([popover-icon]) {
  .popover-icon {
    @include core.popover-icon;
  }
}

:host([popover-icon][popover-expanded]) {
  .popover-icon {
    @include core.popover-icon-expanded;
  }
}

//
// Label
//

@layer label {

  //
  // Label position
  //

  :host([label-position=block-start]) {
    .forge-field {
      @include core.block-start;
  
      .label {
        @include core.label-position(block-start);
      }
    }
  }
  
  :host(#{$inline-start-label}) {
    .forge-field {
      @include core.inline-start;
  
      .label {
        @include core.label-position(inline-start);
      }
    }
  }
  
  :host([label-position=inline-end]) {
    .forge-field {
      @include core.inline-end;
  
      .label {
        @include core.label-position(inline-end);
      }
    }
  }
  
  :host([label-position=inset]) {
    .forge-field {
      @include core.inset;
  
      .label {
        @include core.label-position(inset);
      }
    }
  }
  
  :host([label-position=none]) {
    .forge-field {
      @include core.no-label;
  
      .label {
        @include utils.visually-hidden;
      }
    }
  }

  //
  // Label alignment
  //
  
  :host(#{$inline-start-label}[label-alignment=start]),
  :host([label-position=inline-end][label-alignment=start]) {
    .label {
      @include core.label-alignment(start, inline);
    }
  }
  
  :host(#{$inline-start-label}:where([label-alignment=centered], [label-alignment=default], :not([label-alignment]))),
  :host([label-position=inline-end]:where([label-alignment=centered], [label-alignment=default], :not([label-alignment]))) {
    .label {
      @include core.label-alignment(center, inline);
    }
  }
  
  :host(#{$inline-start-label}[label-alignment=end]),
  :host([label-position=inline-end][label-alignment=end]) {
    .label {
      @include core.label-alignment(end, inline);
    }
  }
  
  :host(#{$inline-start-label}[label-alignment=baseline]),
  :host([label-position=inline-end][label-alignment=baseline]) {
    .label {
      @include core.label-alignment(baseline, inline);
    }
  }
  
  :host([label-position=block-start]:where([label-alignment=start], [label-alignment=default], :not([label-alignment]))) {
    .label {
      @include core.label-alignment(start, block);
    }
  }
  
  :host([label-position=block-start][label-alignment=centered]) {
    .label {
      @include core.label-alignment(center, block);
    }
  }
  
  :host([label-position=block-start][label-alignment=end]) {
    .label {
      @include core.label-alignment(end, block);
    }
  }
  
  :host([label-position=block-start][label-alignment=baseline]:not([variant=plain])) {
    .label {
      @include core.label-alignment(baseline, block);
    }
  }
  
  :host([label-position=block-start][label-alignment=baseline][variant=plain]) {
    .label {
      @include core.label-alignment(baseline, block, 0px);
    }
  }

  //
  // Floating label
  //
  
  :host([label-position=inset][float-label]) {
    .label {
      @include core.floating-label;
    }
  
    .input {
      @include core.floating-input;
    }
  
    .forge-field--floating {
      .container {
        ::slotted(input) {
          @include core.slotted-floating-input;
        }
      }
    }
  }
}

//
// Required
//

:host([required]) {
  .label::before {
    @include core.label-before;
  }
}

//
// Optional
//

:host([optional]) {
  .label::after {
    @include core.label-after;
  }
}

//
// Density
//

@each $density, $selector in $densities {
  :host(#{$selector}) {
    .container {
      @include core.container-density($density);
    }
  }

  :host([label-position=inset]#{$selector}) {
    .container {
      @include core.container-density($density, true);
    }
  }
}

//
// Variant
//

@layer variant {
  @layer {
    @each $variant, $variant-selector in $variants {
      @each $theme, $theme-selector in $themes {
        :host(#{$variant-selector}#{$theme-selector}) {
          .container {
            @include core.container-variant($variant, $theme);

            &::before {
              @include core.container-background-variant($variant, $theme);
            }
          }

          .label {
            @include core.label-variant($variant, $theme);
          }
        }
    
        :host([label-position=inset]#{$variant-selector}#{$theme-selector}) {
          .label {
            @include core.inset-label-variant($variant, $theme);
          }
        }
      }
    }
  }
}

//
// Hover
//

@each $variant, $variant-selector in $variants {
  @each $theme, $theme-selector in $themes {
    :host(#{$hover}#{$variant-selector}#{$theme-selector}) {
      .container {
        @include core.container-hover($variant, $theme);

        &::before {
          @include core.container-background-hover($variant, $theme);
        }
      }
    }
  }
}

//
// Focus
//

@each $variant, $variant-selector in $variants {
  :host(#{$focus}#{$variant-selector}) {
    .container::before {
      @include core.container-background-focus($variant);
    }
  }
}

//
// Invalid
//

:host([invalid]) {
  .label {
    @include core.label-invalid;
  }
}

@each $variant, $variant-selector in $variants {
  :host([invalid]#{$variant-selector}) {
    .container {
      @include core.container-invalid($variant);

      &::before {
        @include core.container-background-invalid($variant);
      }
    }
  }

  :host([invalid]#{$hover}#{$variant-selector}) {
    .container {
      @include core.container-invalid-hover($variant);

      &::before {
        @include core.container-background-invalid-hover($variant);
      }
    }
  }

  :host([invalid][label-position=inset]#{$variant-selector}) {
    .label {
      @include core.inset-label-invalid($variant);
    }
  }
}

//
// Disabled
//

:host([disabled]) {
  .container {
    & > :not(.accessory) {
      @include core.field-disabled;
    }

    &::before {
      @include core.field-disabled;
    }
  }

  .label {
    @include core.field-disabled;
  }

  .accessory::before {
    @include core.field-disabled;
  }
}

//
// Slotted
//

.forge-field {
  .container {
    ::slotted(input) {
      @include core.slotted-input;
    }

    ::slotted(textarea) {
      @include core.slotted-input;
    }
  }
}

//
// Focus indicator
//

@each $theme, $selector in $themes {
  forge-focus-indicator {
    @include focus-indicator.provide-theme((
      outward-offset: 0px,
      shape: #{token(shape)}
    ));
  }

  @if $theme != default and $theme != primary {
    :host(#{$selector}) {
      forge-focus-indicator {
        @include focus-indicator.provide-theme((
          color: theme.variable(#{$theme})
        ));
      }
    }
  }
}


:host([invalid]) {
  forge-focus-indicator {
    @include focus-indicator.provide-theme((
      color: #{token(invalid-color)}
    ));
  }
}
