@use './core';
@use './configuration';
@use '../../focus-indicator';
@use '../../state-layer';
@use './token-utils' as *;

//
// Host
//

:host {
  @include core.host;
}

:host([hidden]) {
  display: none;
}

//
// Base
//

.forge-tab {
  @include configuration.configuration;
}

.forge-tab {
  @include core.tab;

  .content {
    @include core.content;

    .label {
      @include core.label;
    }
  }

  .indicator {
    @include core.indicator;
  }
}

:host, ::slotted(*) {
  white-space: nowrap;
}

forge-focus-indicator {
  @include focus-indicator.provide-theme((
    color: #{token(active-color)},
    shape: 8px
  ));
}

forge-state-layer {
  @include state-layer.provide-theme((
    color: #{token(inactive-color)}
  ));
}

//
// States
//

:host(:focus) {
  .forge-tab {
    @include core.focus;
  }
}

:host(:active) {
  .forge-tab {
    @include core.pressed;
  }
}

//
// Disabled
//

:host([disabled]) {
  @include core.host-disabled;

  .forge-tab {
    @include core.disabled;

    pointer-events: none;
  }
}

//
// Selected
//

:host([selected]) {
  .forge-tab {
    color: #{token(active-label-text-color)};

    ::slotted([slot=leading]),
    ::slotted([slot=trailing]) {
      color: #{token(active-icon-color)};
    }

    &:hover {
      color: #{token(active-hover-label-text-color)};
    }

    &:hover {
      ::slotted([slot=leading]),
      ::slotted([slot=trailing]) {
        color: #{token(active-hover-icon-color)};
      }
    }
  
    .indicator {
      opacity: 1;
    }
  }

  forge-state-layer {
    @include state-layer.provide-theme((
      color: #{token(active-color)}
    ));
  }
}

:host([selected]:not([vertical])) {
  forge-focus-indicator {
    @include focus-indicator.provide-theme((
      offset-block: 0 calc(#{token(indicator-height)} + 1px)
    ));
  }
}

:host([selected]:focus) {
  .forge-tab {
    @include core.selected-focus;
  }
}

:host([selected]:active) {
  .forge-tab {
    @include core.selected-pressed;
  }
}

//
// Stacked
//

:host([stacked]) {
  .forge-tab {
    @include override(height, stacked-height);

    .content {
      @include core.content-stacked;
    }
  }
}

//
// Secondary
//

:host([secondary]) {
  .forge-tab {
    @include configuration.configuration-secondary;
  }

  .content {
    @include core.content-secondary;
  }

  .indicator {
    @include core.indicator-secondary;
  }
}

//
// Vertical
//

:host([vertical]) {
  .forge-tab {
    @include core.vertical;
  
    .content {
      @include core.vertical-content;
    }
  
    .indicator {
      @include core.vertical-indicator;
    }
  }

  forge-focus-indicator {
    @include focus-indicator.provide-theme((
      offset-inline: 0 calc(#{token(indicator-height)} + 1px)
    ));
  }
}

:host([vertical][secondary]) {
  .content {
    @include core.vertical-secondary-content;
  }
}

:host([vertical]:not([secondary])) {
  .forge-tab {
    @include configuration.vertical-primary-configuration;
  }
}

//
// Inverted
//

:host([inverted]) {
  .forge-tab {
    @include configuration.configuration-inverted;
  }

  .indicator {
    @include core.inverted-indicator;
  }
}

:host([inverted][vertical]) {
  .forge-tab {
    @include configuration.configuration-vertical-inverted;
  }

  .indicator {
    @include core.vertical-inverted-indicator;
  }
}
