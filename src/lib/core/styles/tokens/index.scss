@use 'sass:map';
@use '../core/config';

@forward './theme/tokens';

// Theme tokens
@use './theme/tokens' as theme-tokens;

// Component tokens
@use './circular-progress/tokens' as circular-progress-tokens;
@use './focus-indicator/tokens' as focus-indicator-tokens;
@use './state-layer/tokens' as state-layer-tokens;

///
/// This is a map of all tokens across all modules.
/// 
$all-tokens: (
  theme: theme-tokens.$tokens,
  circular-progress: circular-progress-tokens.$tokens,
  focus-indicator: focus-indicator-tokens.$tokens,
  state-layer: state-layer-tokens.$tokens
);

///
/// Emits CSS custom property declarations for tokens on a per-module basis,
/// using the provided token map.
/// 
/// The key is the module name, and the value is a map of token names to values.
/// 
@mixin provide($key, $tokens) {
  $module-tokens: map.get($all-tokens, $key);

  @if not $module-tokens {
    @error 'Invalid token module key: "#{$key}"';
  }
  
  @each $token-name, $token-value in $tokens {
    @if not map.get($module-tokens, $token-name) {
      @error 'Invalid token "#{$token-name}" for module "#{$key}"';
    }
    --#{config.$prefix}-#{$key}-#{$token-name}: #{$token-value};
  }
}

///
/// Emits CSS custom property declarations for all in the provided module.
/// 
@mixin configuration($module, $prefix: config.$prefix) {
  $module-tokens: map.get($all-tokens, $module);
  @each $token, $value in $module-tokens {
    --_#{$token}: var(--#{$prefix}-#{$token}, #{$value});
  }
}
